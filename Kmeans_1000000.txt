Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   167                                           def k_means(X, n_clusters, init='k-means++', precompute_distances='auto',
   168                                                       n_init=10, max_iter=300, verbose=False,
   169                                                       tol=1e-4, random_state=None, copy_x=True, n_jobs=1,
   170                                                       algorithm="auto", return_n_iter=False):
   171                                               """K-means clustering algorithm.
   172                                           
   173                                               Read more in the :ref:`User Guide <k_means>`.
   174                                           
   175                                               Parameters
   176                                               ----------
   177                                               X : array-like or sparse matrix, shape (n_samples, n_features)
   178                                                   The observations to cluster.
   179                                           
   180                                               n_clusters : int
   181                                                   The number of clusters to form as well as the number of
   182                                                   centroids to generate.
   183                                           
   184                                               init : {'k-means++', 'random', or ndarray, or a callable}, optional
   185                                                   Method for initialization, default to 'k-means++':
   186                                           
   187                                                   'k-means++' : selects initial cluster centers for k-mean
   188                                                   clustering in a smart way to speed up convergence. See section
   189                                                   Notes in k_init for more details.
   190                                           
   191                                                   'random': generate k centroids from a Gaussian with mean and
   192                                                   variance estimated from the data.
   193                                           
   194                                                   If an ndarray is passed, it should be of shape (n_clusters, n_features)
   195                                                   and gives the initial centers.
   196                                           
   197                                                   If a callable is passed, it should take arguments X, k and
   198                                                   and a random state and return an initialization.
   199                                           
   200                                               precompute_distances : {'auto', True, False}
   201                                                   Precompute distances (faster but takes more memory).
   202                                           
   203                                                   'auto' : do not precompute distances if n_samples * n_clusters > 12
   204                                                   million. This corresponds to about 100MB overhead per job using
   205                                                   double precision.
   206                                           
   207                                                   True : always precompute distances
   208                                           
   209                                                   False : never precompute distances
   210                                           
   211                                               n_init : int, optional, default: 10
   212                                                   Number of time the k-means algorithm will be run with different
   213                                                   centroid seeds. The final results will be the best output of
   214                                                   n_init consecutive runs in terms of inertia.
   215                                           
   216                                               max_iter : int, optional, default 300
   217                                                   Maximum number of iterations of the k-means algorithm to run.
   218                                           
   219                                               verbose : boolean, optional
   220                                                   Verbosity mode.
   221                                           
   222                                               tol : float, optional
   223                                                   The relative increment in the results before declaring convergence.
   224                                           
   225                                               random_state : int, RandomState instance or None, optional, default: None
   226                                                   If int, random_state is the seed used by the random number generator;
   227                                                   If RandomState instance, random_state is the random number generator;
   228                                                   If None, the random number generator is the RandomState instance used
   229                                                   by `np.random`.
   230                                           
   231                                               copy_x : boolean, optional
   232                                                   When pre-computing distances it is more numerically accurate to center
   233                                                   the data first.  If copy_x is True, then the original data is not
   234                                                   modified.  If False, the original data is modified, and put back before
   235                                                   the function returns, but small numerical differences may be introduced
   236                                                   by subtracting and then adding the data mean.
   237                                           
   238                                               n_jobs : int
   239                                                   The number of jobs to use for the computation. This works by computing
   240                                                   each of the n_init runs in parallel.
   241                                           
   242                                                   If -1 all CPUs are used. If 1 is given, no parallel computing code is
   243                                                   used at all, which is useful for debugging. For n_jobs below -1,
   244                                                   (n_cpus + 1 + n_jobs) are used. Thus for n_jobs = -2, all CPUs but one
   245                                                   are used.
   246                                           
   247                                               algorithm : "auto", "full" or "elkan", default="auto"
   248                                                   K-means algorithm to use. The classical EM-style algorithm is "full".
   249                                                   The "elkan" variation is more efficient by using the triangle
   250                                                   inequality, but currently doesn't support sparse data. "auto" chooses
   251                                                   "elkan" for dense data and "full" for sparse data.
   252                                           
   253                                               return_n_iter : bool, optional
   254                                                   Whether or not to return the number of iterations.
   255                                           
   256                                               Returns
   257                                               -------
   258                                               centroid : float ndarray with shape (k, n_features)
   259                                                   Centroids found at the last iteration of k-means.
   260                                           
   261                                               label : integer ndarray with shape (n_samples,)
   262                                                   label[i] is the code or index of the centroid the
   263                                                   i'th observation is closest to.
   264                                           
   265                                               inertia : float
   266                                                   The final value of the inertia criterion (sum of squared distances to
   267                                                   the closest centroid for all observations in the training set).
   268                                           
   269                                               best_n_iter : int
   270                                                   Number of iterations corresponding to the best results.
   271                                                   Returned only if `return_n_iter` is set to True.
   272                                           
   273                                               """
   274         1            3      3.0      0.0      if n_init <= 0:
   275                                                   raise ValueError("Invalid number of initializations."
   276                                                                    " n_init=%d must be bigger than zero." % n_init)
   277         1           20     20.0      0.0      random_state = check_random_state(random_state)
   278                                           
   279         1            2      2.0      0.0      if max_iter <= 0:
   280                                                   raise ValueError('Number of iterations should be a positive number,'
   281                                                                    ' got %d instead' % max_iter)
   282                                           
   283         1         1474   1474.0      0.0      X = as_float_array(X, copy=copy_x)
   284         1        42491  42491.0      1.2      tol = _tolerance(X, tol)
   285                                           
   286                                               # If the distances are precomputed every job will create a matrix of shape
   287                                               # (n_clusters, n_samples). To stop KMeans from eating up memory we only
   288                                               # activate this if the created matrix is guaranteed to be under 100MB. 12
   289                                               # million entries consume a little under 100MB if they are of type double.
   290         1            1      1.0      0.0      if precompute_distances == 'auto':
   291         1            2      2.0      0.0          n_samples = X.shape[0]
   292         1            2      2.0      0.0          precompute_distances = (n_clusters * n_samples) < 12e6
   293                                               elif isinstance(precompute_distances, bool):
   294                                                   pass
   295                                               else:
   296                                                   raise ValueError("precompute_distances should be 'auto' or True/False"
   297                                                                    ", but a value of %r was passed" %
   298                                                                    precompute_distances)
   299                                           
   300                                               # Validate init array
   301         1            3      3.0      0.0      if hasattr(init, '__array__'):
   302                                                   init = check_array(init, dtype=X.dtype.type, copy=True)
   303                                                   _validate_center_shape(X, n_clusters, init)
   304                                           
   305                                                   if n_init != 1:
   306                                                       warnings.warn(
   307                                                           'Explicit initial center position passed: '
   308                                                           'performing only one init in k-means instead of n_init=%d'
   309                                                           % n_init, RuntimeWarning, stacklevel=2)
   310                                                       n_init = 1
   311                                           
   312                                               # subtract of mean of x for more accurate distance computations
   313         1            3      3.0      0.0      if not sp.issparse(X):
   314         1        16042  16042.0      0.4          X_mean = X.mean(axis=0)
   315                                                   # The copy was already done above
   316         1         5022   5022.0      0.1          X -= X_mean
   317                                           
   318         1            7      7.0      0.0          if hasattr(init, '__array__'):
   319                                                       init -= X_mean
   320                                           
   321                                               # precompute squared norms of data points
   322         1         4177   4177.0      0.1      x_squared_norms = row_norms(X, squared=True)
   323                                           
   324         1            2      2.0      0.0      best_labels, best_inertia, best_centers = None, None, None
   325         1            1      1.0      0.0      if n_clusters == 1:
   326                                                   # elkan doesn't make sense for a single cluster, full will produce
   327                                                   # the right result.
   328                                                   algorithm = "full"
   329         1            1      1.0      0.0      if algorithm == "auto":
   330         1            5      5.0      0.0          algorithm = "full" if sp.issparse(X) else 'elkan'
   331         1            1      1.0      0.0      if algorithm == "full":
   332                                                   kmeans_single = _kmeans_single_lloyd
   333         1            1      1.0      0.0      elif algorithm == "elkan":
   334         1            1      1.0      0.0          kmeans_single = _kmeans_single_elkan
   335                                               else:
   336                                                   raise ValueError("Algorithm must be 'auto', 'full' or 'elkan', got"
   337                                                                    " %s" % str(algorithm))
   338         1            1      1.0      0.0      if n_jobs == 1:
   339                                                   # For a single thread, less memory is needed if we just store one set
   340                                                   # of the best results (as opposed to one set per run per thread).
   341         2            7      3.5      0.0          for it in range(n_init):
   342                                                       # run a k-means once
   343         1            1      1.0      0.0              labels, inertia, centers, n_iter_ = kmeans_single(
   344         1            1      1.0      0.0                  X, n_clusters, max_iter=max_iter, init=init, verbose=verbose,
   345         1            1      1.0      0.0                  precompute_distances=precompute_distances, tol=tol,
   346         1      3579686 3579686.0     98.1                  x_squared_norms=x_squared_norms, random_state=random_state)
   347                                                       # determine if these results are the best so far
   348         1            2      2.0      0.0              if best_inertia is None or inertia < best_inertia:
   349         1         1431   1431.0      0.0                  best_labels = labels.copy()
   350         1            5      5.0      0.0                  best_centers = centers.copy()
   351         1            1      1.0      0.0                  best_inertia = inertia
   352         1            1      1.0      0.0                  best_n_iter = n_iter_
   353                                               else:
   354                                                   # parallelisation of k-means runs
   355                                                   seeds = random_state.randint(np.iinfo(np.int32).max, size=n_init)
   356                                                   results = Parallel(n_jobs=n_jobs, verbose=0)(
   357                                                       delayed(kmeans_single)(X, n_clusters, max_iter=max_iter, init=init,
   358                                                                              verbose=verbose, tol=tol,
   359                                                                              precompute_distances=precompute_distances,
   360                                                                              x_squared_norms=x_squared_norms,
   361                                                                              # Change seed to ensure variety
   362                                                                              random_state=seed)
   363                                                       for seed in seeds)
   364                                                   # Get results with the lowest inertia
   365                                                   labels, inertia, centers, n_iters = zip(*results)
   366                                                   best = np.argmin(inertia)
   367                                                   best_labels = labels[best]
   368                                                   best_inertia = inertia[best]
   369                                                   best_centers = centers[best]
   370                                                   best_n_iter = n_iters[best]
   371                                           
   372         1            6      6.0      0.0      if not sp.issparse(X):
   373         1            1      1.0      0.0          if not copy_x:
   374                                                       X += X_mean
   375         1           12     12.0      0.0          best_centers += X_mean
   376                                           
   377         1            1      1.0      0.0      if return_n_iter:
   378         1            1      1.0      0.0          return best_centers, best_labels, best_inertia, best_n_iter
   379                                               else:
   380                                                   return best_centers, best_labels, best_inertia
